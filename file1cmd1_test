#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'  # For the count summary
NC='\033[0m'      # No Color

# Set your pipex program path
PIPE_X="./pipex"  # Adjust the path to your pipex program if needed

# Test cases (add more as needed)
TEST_CASES=(
    "grep apple"
    "echo Hello World"
    "cat"
    "echo \"New line:\""
    "head -n 2"
    "echo \"Number:\""
    "tail -n 1"
    "grep test"
    "cat"
    "grep apple"
)

# Initialize pass/fail counters
PASS_COUNT=0
FAIL_COUNT=0

# Function to compare the output of the pipex program with expected output
compare_output() {
    expected_output=$1
    actual_output=$2
    if [[ "$expected_output" == "$actual_output" ]]; then
        echo -e "${GREEN}PASS${NC}"
        PASS_COUNT=$((PASS_COUNT+1))
    else
        echo -e "${RED}FAIL${NC}"
        FAIL_COUNT=$((FAIL_COUNT+1))
    fi
}

# Print initial test summary
echo -e "${YELLOW}Starting tests...${NC}"

# Loop through test cases and run them
for i in "${!TEST_CASES[@]}"; do
    # Generate a unique temporary file name
    temp_file="temp_file$i.txt"
    
    echo -e "\nRunning test: ${TEST_CASES[$i]}"

    # Prepare the input file (temp_file)
    echo -e "Preparing input file: $temp_file"

    # Check if temp_file exists, and create if it doesn't
    if [ ! -f "$temp_file" ]; then
        # Create the file with content based on the test case
        case $i in
            0) echo -e "apple\nbanana\napple" > "$temp_file" ;;  # grep apple
            1) echo -e "Hello World" > "$temp_file" ;;  # echo Hello World
            2) echo -e "Hello\n42\nWorld" > "$temp_file" ;;  # cat
            3) echo -e "This is a test" > "$temp_file" ;;  # echo "New line:"
            4) echo -e "One\nTwo\nThree" > "$temp_file" ;;  # head -n 2
            5) echo -e "42 is cool" > "$temp_file" ;;  # echo "Number:"
            6) echo -e "Line1\nLine2\nLine3" > "$temp_file" ;;  # tail -n 1
            7) echo -e "Hello World\nPipex test" > "$temp_file" ;;  # grep test
            8) echo -e "Hello World\nTest line\nAnother line" > "$temp_file" ;;  # cat
            9) echo -e "apple\nbanana\ncherry\napple\nbanana" > "$temp_file" ;;  # grep apple
        esac
        echo "File created: $temp_file"
    fi

    # Ensure the file has been created and can be accessed
    if [ ! -f "$temp_file" ]; then
        echo -e "${RED}Error: Failed to create $temp_file${NC}"
        continue
    fi

    # Run the pipex command and capture its output
    $PIPE_X "$temp_file" "${TEST_CASES[$i]}" > output.txt 2>&1  # Ejecuta el comando en pipex
    actual_output=$(cat output.txt)

    # Run the same shell command and capture expected output
    eval "${TEST_CASES[$i]}" < "$temp_file" > expected_output.txt
    expected_output=$(cat expected_output.txt)

    # Compare the outputs
    compare_output "$expected_output" "$actual_output"

    # Clean up the temporary file
    rm -f "$temp_file"
done

# Final summary
echo -e "${YELLOW}Tests complete.${NC}"
echo -e "${GREEN}Passes: $PASS_COUNT${NC}, ${RED}Fails: $FAIL_COUNT${NC}"

